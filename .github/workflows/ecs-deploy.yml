name: Deploy to Amazon ECS

on:
  workflow_dispatch:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY: MY_ECR_REPOSITORY
    #ECS_SERVICE: MY_ECS_SERVICE
    #ECS_CLUSTER: MY_ECS_CLUSTER
    #ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # path to Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
    #CONTAINER_NAME: MY_CONTAINER_NAME           # name of the container in the
  # containerDefinitions section of the task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ['ubuntu-latest']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: us-east-1


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push first image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecs-test
          IMAGE_TAG: first
        run: |
          echo "Pushing first image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Docker-ubuntu .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Build, tag, and push second image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecs-test
          IMAGE_TAG: second
        run: |
          echo "Pushing second image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile-2 .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v2
#        with:
#          task-definition: ${{ env.ECS_TASK_DEFINITION }}
#          container-name: ${{ env.CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true


#      - name: ECS Service creation
#        uses: scribd/amazon-ecs-service-action@v1
#        with:
#         #spec-file: examples/service-spec.json
#         spec: |
#          {
#            "taskDefinition": "arn:aws:ecs:us-east-1:453899258808:task-definition/ecs-task-definition:1",
#            "serviceName": "service-from-github",
#            "cluster": "ecs-cluster-test",
#            "desiredCount": 1
#          }
#         force-new-deployment: false
#         wait-until-deployment-complete: true


#      - name: Update ECS Service Desired Count to 1
#        run: |
#          aws ecs update-service \
#          --cluster ecs-cluster-test \
#          --service ecs-service \
#          --desired-count 1

#      - name: Update ECS Service Desired Count to 0
#        run: |
#          aws ecs update-service \
#          --cluster ecs-cluster-test \
#          --service ecs-service \
#          --desired-count 0

      - name: Trigger ECS Task
        id: run_task
        run: |
          TASK_ARN=$(aws ecs run-task \
          --cluster ecs-cluster-test \
          --launch-type FARGATE \
          --task-definition arn:aws:ecs:us-east-1:453899258808:task-definition/ecs-task-definition:1 \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-03d9f18c85b4a1db7],securityGroups=[sg-094b6b3a64cebed86],assignPublicIp=ENABLED}" \
          --count 1 \
          --query "tasks[0].taskArn" \
          --output text)
          echo "Started task: $TASK_ARN"
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          

      - name: Monitor ECS Task Status
        run: |
          TASK_ARN=${{ steps.run_task.outputs.TASK_ARN }}
          echo "Monitoring task: $TASK_ARN"

          while true; do
           STATUS=$(aws ecs describe-tasks \
            --cluster ecs-cluster-test \
            --tasks $TASK_ARN \
            --query "tasks[0].lastStatus" \
            --output text)

           echo "Current status: $STATUS"

           if [[ "$STATUS" == "STOPPED" ]]; then
            echo "Tests finished."
            break
           fi

          # Sleep for a bit before checking again
           sleep 10
          done

      - name: List S3 content
        run: |
         lastUpload=$(aws s3 ls s3://ecs-results/results/ --recursive | sort -k 1,2 -r | head -n 1 | awk '{print $4}')
         echo $lastUpload
         echo "lastUpload=$lastUpload" >> $GITHUB_ENV


      - name: Download from S3
        run: |
         aws s3 cp s3://ecs-results/${{ env.lastUpload }} ./reports/
         #aws s3 cp s3://ecs-results/results-2.txt ./reports/
         specificPath=$(pwd)
         echo "specificPath=$specificPath" >> $GITHUB_ENV

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "tests-reports"
          path:  ${{ env.specificPath }}/reports/*.txt

      


